// const { Server } = require("socket.io");

// const ioServer = (server) => {
//     const io = new Server(server, {
//         cors: {
//             origin: "*",
//             methods: ["*"]
//         }
//     });


//     let onlineUsers = {};

//     io.on("connection", (socket) => {
//         console.log(" New client connected:", socket.id);

//         socket.on("register", (userId) => {
//             onlineUsers[userId] = socket.id;
//             console.log(" User registered:", userId, "Socket:", socket.id);
//             console.log(" Current online users:", Object.keys(onlineUsers));
//         });

//         socket.on("call-user", ({ toUid, fromUid, type, channelName }) => {
//             console.log(` Call-user received:`, { toUid, fromUid, type, channelName });
//             console.log(` Online users:`, onlineUsers);
//             console.log(" Full onlineUsers objectTTTT:", fromUid);

//             const receiverSocketId = onlineUsers[toUid];
//             console.log(` Receiver socket ID for ${toUid}:`, receiverSocketId);

//             if (receiverSocketId) {
//                 io.to(receiverSocketId).emit("incoming-call", {
//                     fromUid,
//                     type,
//                     channelName
//                 });
//                 console.log(` Call notification sent from ${fromUid} to ${toUid} on channel ${channelName}`);
//             } else {
//                 console.log(` User ${toUid} is offline`);
//             }
//         });


//         socket.on("call-accepted", ({ toUid, fromUid, type, channelName }) => {
//             console.log(` Call-accepted received:`, { toUid, fromUid, type, channelName });
//             console.log(` Online users:`, onlineUsers);

//             const callerSocketId = onlineUsers[toUid];
//             console.log(` Caller socket ID for ${toUid}:`, callerSocketId);

//             if (callerSocketId) {
//                 io.to(callerSocketId).emit("call-accepted", {
//                     fromUid,
//                     type,
//                     channelName
//                 });
//                 console.log(` Call accepted by ${fromUid} for caller ${toUid} on channel ${channelName}`);
//             } else {
//                 console.log(` Caller ${toUid} is offline`);
//             }
//         });

//         // Call rejected with debugging
//         socket.on("call-rejected", ({ toUid, fromUid }) => {
//             console.log(` Call-rejected received:`, { toUid, fromUid });
//             console.log(` Online users:`, onlineUsers);

//             const callerSocketId = onlineUsers[toUid];
//             console.log(` Caller socket ID for ${toUid}:`, callerSocketId);

//             if (callerSocketId) {
//                 io.to(callerSocketId).emit("call-rejected", { fromUid });
//                 console.log(` Call rejected by ${fromUid} for caller ${toUid}`);
//             } else {
//                 console.log(` Caller ${toUid} is offline`);
//             }
//         });

//         socket.on("disconnect", () => {
//             for (let uid in onlineUsers) {
//                 if (onlineUsers[uid] === socket.id) {
//                     delete onlineUsers[uid];
//                     console.log(" User disconnected:", uid);
//                     console.log(" Remaining online users:", Object.keys(onlineUsers));
//                 }
//             }
//         });
//     });


// };

// module.exports = { ioServer };



// const { Server } = require("socket.io");
// const User = require("./Modal/userSchema"); // User model import, path check karo

// const ioServer = (server) => {
//     const io = new Server(server, {
//         cors: {
//             origin: "*",
//             methods: ["*"]
//         }
//     });

//     let onlineUsers = {};

//     io.on("connection", (socket) => {
//         // console.log("New client connected:", socket.id);

//         // Register user
//         socket.on("register", (userId) => {
//             onlineUsers[userId] = socket.id;
//             // console.log("User registered:", userId, "Socket:", socket.id);
//         });

//         socket.on("call-user", async ({ toUid, fromUid, type, channelName }) => {
//             const callCost = Number(process.env.CALL_COST)
//             try {
//                 const caller = await User.findById(fromUid).select("walletBalance").lean();
//                 console.log("Caller fetched from DB:", caller?.walletBalance);
//                 console.log("Type of walletBalance:", typeof caller.walletBalance, "Value:", caller.walletBalance);
//                 console.log("Comparison result:", Number(caller.walletBalance) < callCost);
//                 console.log("Call cost____Before:", callCost);

//                 if (!caller || Number(caller.walletBalance) < callCost) {
//                     console.log(" Insufficient balance, blocking call.");
//                     socket.emit("call-failed", { message: "Insufficient balance. Call cannot be connected." });
//                     return;
//                 }

//                 console.log("âœ… Balance sufficient, sending incoming-call...");
//                 const receiverSocketId = onlineUsers[toUid];
//                 if (receiverSocketId) {
//                     io.to(receiverSocketId).emit("incoming-call", { fromUid, type, channelName });
//                 }

//             } catch (err) {
//                 console.error("Error in call-user:", err);
//             }
//         });


//         // =================== CALL ACCEPTED + BALANCE DEDUCT =====================
//         // socket.on("call-accepted", async ({ toUid, fromUid, type, channelName }) => {
//         //     try {
//         //         let callCost = 150; // amount to deduct
//         //         await User.findByIdAndUpdate(fromUid, { $inc: { walletBalance: -callCost } });
//         //         // console.log(`Balance deducted from ${fromUid}: -${callCost}`);
//         //     } catch (err) {
//         //         console.error("Error deducting balance:", err);
//         //     }

//         //     const callerSocketId = onlineUsers[toUid];
//         //     if (callerSocketId) {
//         //         io.to(callerSocketId).emit("call-accepted", { fromUid, type, channelName });
//         //     }
//         // });

//         // Call rejected
//         socket.on("call-rejected", ({ toUid, fromUid }) => {
//             const callerSocketId = onlineUsers[toUid];
//             if (callerSocketId) {
//                 io.to(callerSocketId).emit("call-rejected", { fromUid });
//             }
//         });

//         // Call ended
//         socket.on("call-ended", ({ fromUid, toUid }) => {
//             const receiverSocketId = onlineUsers[toUid];
//             if (receiverSocketId) {
//                 io.to(receiverSocketId).emit("call-ended", { fromUid });
//             }
//         });

//         // Disconnect
//         socket.on("disconnect", () => {
//             for (let uid in onlineUsers) {
//                 if (onlineUsers[uid] === socket.id) {
//                     delete onlineUsers[uid];
//                     console.log("User disconnected:", uid);
//                 }
//             }
//         });
//     });
// };

// module.exports = { ioServer };
// const { Server } = require("socket.io");
// const User = require("./Modal/userSchema");
// const fs = require("fs");
// const path = require("path");


// const CALL_RATES = {
//     voice: 1,
//     video: 2
// };


// const ioServer = (server) => {
//     const io = new Server(server, {
//         cors: {
//             origin: "*",
//             methods: ["*"]
//         }
//     });

//     let onlineUsers = {};

//     io.on("connection", (socket) => {
//         socket.on("register", (userId) => {
//             onlineUsers[userId] = socket.id;
//         });

//         socket.on("call-user", async ({ toUid, fromUid, type, channelName }) => {
//             try {

//                 const configPath = path.join(__dirname, "config.json");
//                 const config = JSON.parse(fs.readFileSync(configPath, "utf-8"));
//                 const callCost = config.callCost;
//                 console.log(" Call cost from config:", callCost);
//                 const caller = await User.findById(fromUid).select("walletBalance").lean();
//                 console.log("Caller fetched from DB:", caller?.walletBalance);
//                 console.log("Call cost from config:", callCost);

//                 if (!caller || Number(caller.walletBalance) < callCost) {
//                     console.log(" Insufficient balance, blocking call.");
//                     socket.emit("call-failed", { message: "Insufficient balance. Call cannot be connected." });
//                     return;
//                 }
//                 console.log(" Balance sufficient, sending incoming-call...");
//                 const receiverSocketId = onlineUsers[toUid];
//                 if (receiverSocketId) {
//                     io.to(receiverSocketId).emit("incoming-call", { fromUid, type, channelName });
//                 }
//             } catch (err) {
//                 console.error("Error in call-user:", err);
//             }
//         });

//         socket.on("call-accepted", async ({ fromUid, toUid, type, channelName }) => {
//             const callerSocketId = onlineUsers[fromUid];
//             const receiverSocketId = onlineUsers[toUid];

//             if (callerSocketId) {
//                 io.to(callerSocketId).emit("call-accepted", { fromUid: toUid, type, channelName });
//             }
//             if (receiverSocketId) {
//                 io.to(receiverSocketId).emit("call-accepted", { fromUid, type, channelName });
//             }

//             const rate = CALL_RATES[type] || 1;
//             const intervalId = setInterval(async () => {
//                 const caller = await User.findById(fromUid).select("walletBalance").lean();
//                 if (!caller || caller.walletBalance < rate) {
//                     clearInterval(intervalId);
//                     io.to(callerSocketId).emit("call-ended", { reason: "Insufficient balance" });
//                     io.to(receiverSocketId).emit("call-ended", { reason: "Insufficient balance" });
//                     return;
//                 }

//                 await User.findByIdAndUpdate(fromUid, { $inc: { walletBalance: -rate } });
//                 console.log(`Deducted â‚¹${rate} from ${fromUid}. Remaining: ${caller.walletBalance - rate}`);
//             }, 60 * 1000);

//             socket.callIntervalId = intervalId;
//         });


//         socket.on("call-rejected", ({ toUid, fromUid }) => {
//             const callerSocketId = onlineUsers[toUid];
//             if (callerSocketId) {
//                 io.to(callerSocketId).emit("call-rejected", { fromUid });
//             }
//         });

//         socket.on("call-ended", ({ fromUid, toUid }) => {
//             clearInterval(socket.callIntervalId);
//             const receiverSocketId = onlineUsers[toUid];
//             if (receiverSocketId) {
//                 io.to(receiverSocketId).emit("call-ended", { fromUid });
//             }
//         });


//         socket.on("disconnect", () => {
//             for (let uid in onlineUsers) {
//                 if (onlineUsers[uid] === socket.id) {
//                     delete onlineUsers[uid];
//                     console.log("User disconnected:", uid);
//                 }
//             }
//         });
//     });
// };

// module.exports = { ioServer };